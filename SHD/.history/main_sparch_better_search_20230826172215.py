
import cma
import torch
from main_sparch_better import *

model = torch.load(r'log\08-22-02-36\ckpt\best_model_87_93.7279151943463.pth').to('cuda:6')
train_loader, test_loader = load_shd_or_ssc()

best_alpha = [0.8324599263393094, 0.9577880775757136, 0.9493865495332804, 
              0.819666413818827, 0.9319263465719396, 0.8467801291870999,
              0.9596317584033548, 0.8974740377994116, 0.9104507240795107,
              0.9043384637973181, 0.8214896458024828, 0.8353499269450365,
              0.8192027854650317, 0.9131052709938021, 0.9571437375264752,
              0.8194014683898283, 0.8190570051187357, 0.8773655482376066,
              0.8193359355381387, 0.9606633414043868, 0.818813428919047,
              0.8394695308169239, 0.95953412879367, 0.821079294990385,
              0.8187446373610213, 0.9607673715910588, 0.8212400086469198,
              0.9134284534141287, 0.8237341195540306, 0.8187693654313014,
              0.8195448366864335, 0.8266268635061091, 0.9575425618778339,
              0.9424193740241164, 0.9542312363893343, 0.9344240588404188, 
              0.8426966977464425, 0.9602850377695834, 0.9591388203153971, 
              0.8187482157638599, 0.884150940238285, 0.9589849585085711, 
              0.908797792309342, 0.8388258851173465, 0.8272218318047267, 
              0.9594548983007906, 0.958749405448932, 0.8216287200028064, 
              0.9460130284284209, 0.9603879424677776, 0.8577250654987577, 
              0.9037624747983349, 0.8207974446896056, 0.8211569403245379, 
              0.8612772078559803, 0.8189247157129359, 0.8204113192198467, 
              0.8190399181169468, 0.8219280765737167, 0.9607524478564491, 
              0.9343259117336167, 0.8669801134738621, 0.823025315000271, 
              0.8414156669370539, 0.8187648377892878, 0.8188872439931084, 
              0.8214478605025661, 0.9242620667173194, 0.9607550626207928, 
              0.8964489510602482, 0.8906320483350547, 0.8207429412963498, 
              0.9576962784447816, 0.8220475251142849, 0.9366324049488758, 
              0.8188148769519304, 0.8220436177949371, 0.8260650452376758, 
              0.9559568824191944, 0.9603612411667134, 0.8187453549200111, 
              0.8224820866782068, 0.9607891565412953, 0.8191981199455588, 
              0.8187694356547054, 0.9607883583809332, 0.9159972895400491, 
              0.8575695352309901, 0.960206818807581, 0.9564514367651141, 
              0.8585372804320657, 0.9606254886350706, 0.8203212192685755, 
              0.9606362892518893, 0.8214578390361972, 0.8214325560718866, 
              0.9606882602684031, 0.9599305926928073, 0.8362224987308154, 
              0.9590159236256487, 0.8206186191112234, 0.8779467650602568, 
              0.9607476234080264, 0.9584120511729483, 0.8259399126173893, 
              0.8679419118017291, 0.9577981835041617, 0.849479772018819, 
              0.8243964808920043, 0.9573886643612485, 0.8190963186159317, 
              0.8257126915098101, 0.8252545035912574, 0.8195182651079462, 
              0.9594914341800812, 0.8201757260340139, 0.9595990152792476, 
              0.8190715404565023, 0.8852409017331644, 0.9577157672865221, 
              0.8189957344830621, 0.9366686548632159, 0.9214482034936584, 
              0.9601415345051157, 0.8193374804941764, 0.8190784146010911, 
              0.8192644637588203, 0.884681287913689]

best_beta = [0.97256395, 0.99074706, 0.9672161 , 0.99029245, 0.96814693,
       0.99165949, 0.96955689, 0.96927495, 0.99110786, 0.99165544,
       0.99085009, 0.98046028, 0.99166628, 0.99164499, 0.9916924 ,
       0.99060472, 0.96775346, 0.98845951, 0.9672264 , 0.99145321,
       0.98186853, 0.96738463, 0.98292404, 0.99075785, 0.98798603,
       0.97446569, 0.99167624, 0.98779759, 0.99156251, 0.98920214,
       0.99165829, 0.96939714, 0.96869089, 0.9726575 , 0.96740402,
       0.99031122, 0.99138038, 0.96943011, 0.96833877, 0.9674483 ,
       0.98985584, 0.97008662, 0.98570504, 0.99150564, 0.99169906,
       0.98066576, 0.96752089, 0.96724828, 0.96951252, 0.97217376,
       0.99050927, 0.9678066 , 0.9772856 , 0.98489694, 0.99165317,
       0.99168238, 0.98854559, 0.99113124, 0.99121836, 0.96876005,
       0.99096571, 0.96858371, 0.99165413, 0.96732699, 0.9916783 ,
       0.99168708, 0.98863382, 0.99168978, 0.99170129, 0.98845998,
       0.9897373 , 0.99169406, 0.9909825 , 0.97718075, 0.96753425,
       0.98701238, 0.98104809, 0.9903783 , 0.97482432, 0.96722926,
       0.99170129, 0.99163632, 0.9907788 , 0.98952895, 0.99149605,
       0.96835563, 0.99161299, 0.99140264, 0.96760448, 0.98630127,
       0.96733564, 0.99151831, 0.99086999, 0.98700407, 0.99149767,
       0.99040365, 0.97888822, 0.98709541, 0.99099017, 0.9895705 ,
       0.99158849, 0.97452827, 0.99081035, 0.99091797, 0.96723802,
       0.98764014, 0.96737677, 0.99164076, 0.98214805, 0.97035564,
       0.96745987, 0.97133753, 0.99071728, 0.99057185, 0.97148519,
       0.99166722, 0.99040249, 0.99081736, 0.96790447, 0.98835052,
       0.99044821, 0.96959204, 0.98342748, 0.96923212, 0.99163885,
       0.99063316, 0.9905511 , 0.99100212]

def objective_func(x):
    a = x[0: 128]
    b = x[128: 128*2]
    model.eval()
    with torch.no_grad():
        for i in range(128):
            model.alpha.data[i*8:(i+1)*8] = torch.tensor(best_alpha[i]).cuda() # *(np.exp(-1 / 25) - np.exp(-1 / 5)) + np.exp(-1 / 5)
            model.beta.data[i*8:(i+1)*8] = torch.tensor(best_beta[i]).cuda()
            model.a.data[i*8:(i+1)*8] = torch.tensor(a[i]).cuda()
            model.b.data[i*8:(i+1)*8] = torch.tensor(b[i]).cuda()
        losses, correct, total = [], 0, 0
        for images, labels in test_loader:
            images = torch.sign(images.clamp(min=0)) # all pixels should be 0 or 1
            outputs, firing_rates, all_spikes = model(images.to(config.device), 0)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted.cpu() == labels.long().cpu()).sum()
        accuracy = 100. * correct.numpy() / total

    return 93.7279151943463-accuracy

# 定义初始参数和每个参数维度上的步长
# x0 = np.random.uniform(np.exp(-1/5), np.exp(-1/25), size=(128))  # 初始参数值
x0 = np.concatenate((model.a.data.cpu().view(8,128).mean(0).numpy(),
                     model.b.data.cpu().view(8,128).mean(0).numpy()))
# x0 = np.concatenate((np.random.uniform(np.exp(-1/5), np.exp(-1/25), 128), 
                # np.random.uniform(np.exp(-1/30), np.exp(-1/120), 128),
                # np.random.uniform(-1, 1, 128),
                # np.random.uniform(0, 2, 128),))
sigma0 = 0.01  # 参数步长

# 定义参数的上下界
lower_bounds = [-1]*128 + [0]*128
upper_bounds = [1]*128 + [2]*128
# lower_bounds = [np.exp(-1/5)]*128 + [np.exp(-1 / 30)]*128 + [-1]*128 + [0]*128  # 参数的下界
# upper_bounds = [np.exp(-1/25)]*128 + [np.exp(-1 / 120)]*128 + [1]*128 + [2]*128  # 参数的上界
bounds = [lower_bounds, upper_bounds]

# 创建CMAES对象并运行优化
es = cma.CMAEvolutionStrategy(x0, sigma0, {'bounds': bounds,
                                           'popsize': 50,
                                           'maxiter': 1000,
                                          #  'verbose': True,
                                           'verb_disp': 1,
                                           'tolfun': 1e-11, 
                                           'tolstagnation': 50})
es.optimize(objective_func)

# 输出最佳解和对应的目标函数值
best_solution = es.result.xbest
best_fitness = es.result.fbest
print("Best solution found: ", best_solution)
print("Best fitness value: ", best_fitness)